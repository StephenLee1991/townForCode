教程网址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
傻瓜式安装git
安装成功之后执行以下两条命令
git config --global user.name "xxxxxx"
git config --global user.email "xxxxxx"
因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
1.初始化一个Git仓库，使用git init命令
	本人实在本地E盘新建了一个文件夹GitHub，执行git init命令后文件夹中多了一个.git文件夹，该文件夹勿动！！！
2.添加文件到Git仓库，分两步：
	进入GitHub目录
	创建一个文本文档
	第一步，使用命令git add readme.txt，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。
3.提交时切记:git commit -m "xxxxxx"
	-m参数是对提交的代码的解释说明"xxxxxx"
4.修改readme.txt
	随意修改之后，
	git status命令可以查看当前工作目录中内容有没有发上改变
	git diff命令可以查看哪些不同的地方
5.准备再次提交该文件
	git add readme.txt
	git commit -m "add distrubuted"
6.再次查看
	git status会显示
		On branch master
		nothing to commit, working tree clean
	Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。
7.注意
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
8.查看工作区readme.txt的历史修改记录
	$ git log
	commit 0ae5d59db5f79d54ab510bbad026bafad9fdb8b7 (HEAD -> master)   (HEAD -> master)-------------意思是该版本是当前的版本
	Author: elevencityhost <15901506742@163.com>
	Date:   Wed Jan 3 17:04:41 2018 +0800

	    append GPL

	commit d4002271b4447f9d0315dd63a75d50763912daef
	Author: elevencityhost <15901506742@163.com>
	Date:   Wed Jan 3 16:34:09 2018 +0800

	    add distributed

	commit b7e3d760b4da77ec6290d1728c849294911648e3
	Author: elevencityhost <15901506742@163.com>
	Date:   Wed Jan 3 16:23:59 2018 +0800

	    wrote a readme file
	切记--------------git log 命令执行后如何退出？？？英文状态下按Q
9.回退版本
	git reset --hard HEAD^---------------------意思是回退到上个版本
	git reset --hard HEAD^^--------------------意思是回退到上上个版本
	更简洁的办法，每个版本都有独立的版本号commit id
	git reset --hard commit id
	例如回退到第一个版本 git reset --hard b7e3d760b4da77e-------------------commit id没有必要写全,github会自动去找
10.Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL改为指向add distributed。
	然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。
11.查看git以往所有日志
	git reflog,便能够查询出工作区曾经操作过得所有的历史记录，前面自带commit id
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
对Git的工作区、暂存区、版本库的理解
以上面讲的案例为例
工作区(Working Repository)指得是本人在E盘新建的文件夹GitHub
打开该文件夹，里面有个隐藏的文件夹，名为.git，该文件夹叫做版本库
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
在我们执行 git add readme.txt命令时，实际上是将工作区的内容提交到暂存区（stage）
上面我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
每次修改，如果不add到暂存区，那就不会加入到commit中。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
下面介绍git checkout 命令
场景：当我们修改了工作区的代码（代码量很多），发现有错误需要回退到修改前的版本，尽管可以手动删除修改。但是git提供了更高级的命令来操作。
解决方案：git checkout -- readme.txt
该命令会使工作区代码回退到上一次git add的版本
下面介绍git reset命令
场景：当我们在工作区修改了代码，并且将其add到代码库中的暂存区后，突然发现代码有错误需要撤销。
解决方案：1.先将暂存区的代码移除。 git reset HEAD readme.txt
		  2.将工作区的代码撤销。   git checkout -- readme.txt
总结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
下面介绍误删文件如何处理
场景：在工作区不小心删掉了一个文件,执行命令 git status
	$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add/rm <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

	        deleted:    test.txt

	no changes added to commit (use "git add" and/or "git commit -a")
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
现在有两个选择：1、从版本库中删除该文件 git rm test.txt   并且 git commit -m "xxxxxx"
				2、撤销对工作区该文件的删除操作 git checkout test.txt
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
下面介绍远程仓库
Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。
你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？
其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。
实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫GitHub的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第1步：创建SSH Key。
	在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。
	如果已经有了，可直接跳到下一步。
	如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "15901506742@163.com"
	如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对。
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，settings----SSH and GPG keys----New SSH key
		title中自定义标题
		key中的内容是id_rsa.pub中的内容粘贴过去
第3步：点击 add key就成功创建了。
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。
确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
创建远程仓库
	登录GitHub账号，new Repository,自定义仓库的名称SleepForest以及描述xxxxxx
	目前这个库SleepForest还是空的，可以将其与本地库关联起来。
	选择  push an existing repository from command line
		  git remote add origin https://github.com/elevencityhost/SleepForest.git
		  git push -u origin master
    在本地GitBash中执行以上两条命令:
    $ git remote add origin https://github.com/elevencityhost/SleepForest.git
    该命令是将本地库与远程库关联起来。远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
    $ git push -u origin master
    该命令是把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数。
    Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来,在以后的推送或者拉取时就可以简化命令。
    推送成功后，可以看到类似以下信息，并且可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
    $ git push origin master
	Username for 'https://github.com': elevencityhost
	Counting objects: 3, done.
	Delta compression using up to 4 threads.
	Compressing objects: 100% (2/2), done.
	Writing objects: 100% (3/3), 273 bytes | 273.00 KiB/s, done.
	Total 3 (delta 1), reused 0 (delta 0)
	remote: Resolving deltas: 100% (1/1), completed with 1 local object.
	To https://github.com/elevencityhost/SleepForest.git
	   cae736b..1658d2e  master -> master
从现在起，只要本地作了提交，就可以通过命令：git push origin master 把本地master分支的最新修改推送至GitHub。
总结：
	要关联一个远程库，使用命令$ git remote add origin https://github.com/elevencityhost/SleepForest.git；

	关联后，使用命令git push -u origin master第一次推送本地版本库master分支的所有内容；

	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
-------------------------------------------------------------------------------------------------------------------------------------------------------------------SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。
如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Clone
	场景：如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
	命令：$ git clone git@github.com:elevencityhost/SleepForest.git
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
创建与合并分支
	上面我们讲过git会默认创建一个master的一个分支
	接下来我们创建一个dev分支并从master分支切换到dev
	$ git checkout -b dev
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
																  $ git branch dev    创建dev分支
																  $ git checkout dev  切换到dev分支
    $ git branch命令会列出所有分支，当前分支前面会标一个 * 号。

    切换到dev分支上后，修改readme.txt文件内容，git add readme.txt  git commit -m "add some content"
    查看readme.txt,文件内容发生改变，切换回master分支，git checkout master,查看readme.txt文件，内容发生改变。
    将dev分支上的内容合并到master分支上 $ git merge dev  该命令用于合并指定分支到当前分支

删除分支
	将dev分支删除----------$ git branch -d dev
	删除后，$ git branch 就只剩下master分支了。

因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
总结：
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch dev

切换分支：git checkout dev

创建+切换分支：git checkout -b dev

合并某分支到当前分支：git merge dev

删除分支：git branch -d dev
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
分支合并时发生冲突
    场景：master分支readme.txt文件内容为creating a new branch is quick & simple.
    	  feature1分支readme.txt文件内容为creating a new branch is quick AND simple.
    	  合并两个分支，$ git merge feature1 必然出现冲突。
    	  查看readme.txt文件内容：
    	  						<<<<<<< HEAD
								creating a new branch is quick & simple.
								=======
								creating a new branch is quick AND simple.
								>>>>>>> feature1
	解决方案：编辑readme.txt文件内容，修改为creating a new branch is quick & simple.
			  添加到暂存区 git add readme.txt
			  提交到版本库 git commit -m "xxxxxx",命令结束会自动提示冲突解决[master e7e519a] conflict fixed
	查看分支合并图：git log --graph
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
分支管理策略
	之前将dev分支合并到master分支是采用fast forward (快进)的方式
	现在介绍普通的合并模式 git merge --no--ff -m "xxxxxx" dev
	不采用fast forward方式的话Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看合并信息。
	实战一下：创建一个分支dev，修改readme.txt文件内容。add后commit
	回到master分支，git merge --no-f -m "merge without -ff" dev
	该命令就是采用第二种方式，与dev合并后再重新提交一次，这样就可以从分支历史上看到合并信息。
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
BUG分支
	场景：当正在dev开发的过程中遇到了一个bug而且必须在两个小时内解决。此时工作区已经开发了部分功能但是不全，但是又必须修复bug,如何处理？
	解决方案：$ git stash 该命令可以将工作区的任务隐藏起来，等到bug解决之后再拿出来继续开发。
			  $ git stash
			  Saved working directory and index state WIP on dev: 56e9cea add merge
			  接下里修复bug:首先确定要在哪个分支上修复bug,如何确定在master分支上，那就在master分支上创建临时分支issue-101
			  $ git checkout -b issue-101 创建issue-101分支并切换到issue-101分支上
			  修改readme.txt内容并add然后commit
			  切换到master分支，将issue-101分支与master分支进行合并
			  $ git merge --no-f -m "fix bug 101" issue-101
			  此时bug就已经解决并且合并到master分支上去了。可以将临时分支issue-101删除掉。$ git branch -d issue-101
			  bug解决了，临时分支也删掉了,回到dev分支，git status,工作区也是干净的。但是刚才有git stash 隐藏一些工作，如何恢复呢？
			  使用命令：$ git stash list
			  			stash@{0}: WIP on dev: 56e9cea add merge
			  			工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
			  			第一种：git stash apply 恢复工作现场但是stash内容还在，需要继续执行git stash drop删除
			  			第二种：git stash pop 恢复现场的同事顺便删除stash内容
总结：
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Feature分支
	每当开发一个新功能时，务必先创建一个分支，然后进行开发，开发结束后再合并到dev分支上就OK了，合并后将建立的临时分支删除就OK。
	一般我们合并后会删除临时分支 git branch -d feature-vulcan
	但是命令执行后会报错误
						error: The branch 'feature-vulcan' is not fully merged.
						If you are sure you want to delete it, run 'git branch -D feature-vulcan'
	意思是告诉开发人员，该分支还没有合并，如果想删除的话，使用命令 git branch -D feature-vulcan
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
查看远程库信息：$ git remote -v
				origin  https://github.com/elevencityhost/TheTwilightSaga.git (fetch)    抓取
				origin  https://github.com/elevencityhost/TheTwilightSaga.git (push)     推送

				推送到master分支 git push origin master
				推送到dev分支    git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
解决冲突：
	场景：多人协同开发。我的小伙伴使用 $ git clone git@git.com:/elevencityhost/xxxxxx.git从GitHub远程仓库克隆了代码到本地进行修改，并add到暂存区并commit到版本库，之后$ git push origin dev.
	然后我在本地工作区也修改了相同文件的代码，然后我add  commit 然后直接执行命令 $ git push origin dev
	然后报错：
	$ git push origin dev
	To https://github.com/elevencityhost/TheTwilightSaga.git
	 ! [rejected]        dev -> dev (fetch first)
	error: failed to push some refs to 'https://github.com/elevencityhost/TheTwilightSaga.git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.
	推送失败，因为我的小伙伴的最新提交和我试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
	然后我执行 $ git pull 命令
	$ git pull
	remote: Counting objects: 3, done.
	remote: Compressing objects: 100% (2/2), done.
	remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
	Unpacking objects: 100% (3/3), done.
	From https://github.com/elevencityhost/TheTwilightSaga
	 * [new branch]      dev        -> origin/dev
	There is no tracking information for the current branch.
	Please specify which branch you want to merge with.
	See git-pull(1) for details.

	    git pull <remote> <branch>

	If you wish to set tracking information for this branch you can do so with:

	    git branch --set-upstream-to=origin/<branch> dev
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
	执行 $ git branch --set-upstream-to=origin/dev dev
	解决了：Branch 'dev' set up to track remote branch 'dev' from 'origin'.
	$ git pull
	Auto-merging readshe.txt
	CONFLICT (content): Merge conflict in readshe.txt
	Auto-merging readme.txt
	CONFLICT (content): Merge conflict in readme.txt
	Automatic merge failed; fix conflicts and then commit the result.
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push；
总结：
	因此，多人协作的工作模式通常是这样：

	首先，可以试图用git push origin branch-name推送自己的修改；

	如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

	如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令$ git branch --set-upstream-to=origin/dev dev。

	这就是多人协作的工作模式，一旦熟悉了，就非常简单。

	查看远程库信息，使用git remote -v；

	本地新建的分支如果不推送到远程，对其他人就是不可见的；

	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	---------------------------------------------------------------------------------------------------------------------------------------------------------------
标签管理
	复习SVN文件目录： branch----开发人员开发完成后自测没问题提交到该目录下的分支上
					  trunk-----当开发任务完成后开发经理将branch分支上的代码合并到该目录下，并发邮件给产品，由产品提测
					  test------测试人员将trunk目录下的war包部署到测试服务器，并进行测试，当完全OK的话，产品会发邮件部署项目上线
					  tag-------运维人员将test目录下的war包部署到生产服务器上
	发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。

	Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。

	Git有commit，为什么还要引入tag？

	“请把上周一的那个版本打包发布，commit号是6a5819e...”

	“一串乱七八糟的数字不好找！”

	如果换一个办法：

	“请把上周一的那个版本打包发布，版本号是v1.2”

	“好的，按照tag v1.2查找commit就行！”

	所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起.
	---------------------------------------------------------------------------------------------------------------------------------------------------------------
	命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

	git tag -a <tagname> -m "blablabla..."可以指定标签信息；

	git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

	命令git tag可以查看所有标签。

	命令git push origin <tagname>可以推送一个本地标签；

	命令git push origin --tags可以推送全部未推送过的本地标签；

	命令git tag -d <tagname>可以删除一个本地标签；

	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	---------------------------------------------------------------------------------------------------------------------------------------------------------------
	如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：

	git clone git@github.com:michaelliao/bootstrap.git
	一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

	Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：
	如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。

	如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了.
	---------------------------------------------------------------------------------------------------------------------------------------------------------------
总结
	在GitHub上，可以任意Fork开源仓库；

	自己拥有Fork后的仓库的读写权限；

	可以推送pull request给官方仓库来贡献代码。